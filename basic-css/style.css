boiler plate code every time use boiler plate code */ * {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}
body {
  height: 100%;
  width: 100%;
}

/* üìí CSS Units & Min/Max Complete Notes

  1Ô∏è‚É£ Absolute Units
px ‚Üí Fixed pixels, device size change hone par bhi same rahte.
font-size: 16px;

2Ô∏è‚É£ Relative Units
Ye apne reference element ke size ke hisaab se change hote hain.

em
Reference: Parent element ka font-size.

Nested hone par multiply ho sakta hai.

p { font-size: 1.5em; } /* 1.5 √ó parent size

rem
Reference: Root (<html>) ka font-size.

Consistent rahte hai, nesting ka effect nahi hota.

h1 { font-size: 2rem; } /* 2 √ó root size

3Ô∏è‚É£ Viewport Units
Ye screen size ke hisaab se calculate hote hain.

1vh ‚Üí Viewport height ka 1%

1vw ‚Üí Viewport width ka 1%

section { height: 100vh; }
h1 { font-size: 5vw; }


4Ô∏è‚É£ Min/Max Properties
Element ke size ko limit karte hain.

min-width / min-height ‚Üí Minimum limit set karta hai.

max-width / max-height ‚Üí Maximum limit set karta hai.

div {
  width: 50%;
  min-width: 300px;
  max-width: 800px;
}

5Ô∏è‚É£ CSS Functions
Dynamic sizing ke liye.

min(a, b)
Chhota value lega.

width: min(50%, 400px);

max(a, b)
width: max(50%, 400px);

clamp(min, preferred, max)
Minimum, preferred, aur maximum value ek saath set karta hai.

font-size: clamp(14px, 2vw, 20px);




| Unit / Function | Best For                   | Reference        |
| --------------- | -------------------------- | ---------------- |
| px              | Fixed UI                   | None             |
| em              | Component scaling          | Parent font-size |
| rem             | Global scaling             | Root font-size   |
| vh              | Fullscreen height sections | Viewport height  |
| vw              | Responsive fonts/layouts   | Viewport width   |
| min-width       | Minimum element size       | Fixed/relative   |
| max-width       | Maximum element size       | Fixed/relative   |
| min()           | Chhota value choose        | Calculation      |
| max()           | Bada value choose          | Calculation      |
| clamp()         | Flexible + safe range      | Min‚ÄìMax control  |


 */

/* üìí CSS Text Properties 

 1Ô∏è‚É£ text-align
Text ko horizontally align karta hai.

text-align: left;     /* Default */
/* 
text-align: right;
text-align: center;
text-align: justify;  Equal space between words

2Ô∏è‚É£ text-decoration
Text pe underline, overline, ya strikethrough lagata hai.

text-decoration: none;       /* Remove underline (links) */
/* text-decoration: underline;
text-decoration: overline;
text-decoration: line-through; 
text-decoration-color, text-decoration-style, text-decoration-thickness bhi set kar sakte ho.

3Ô∏è‚É£ text-transform
Text ka case change karta hai.

text-transform: none;
text-transform: uppercase;   SAB CAPITAL 
text-transform: lowercase;   sab small 
text-transform: capitalize;  Har Word Ka First Letter Capital 

4Ô∏è‚É£ letter-spacing
Letters ke beech ka gap control karta hai.
letter-spacing: 2px;  Har letter ke beech 2px gap 

5Ô∏è‚É£ word-spacing
Words ke beech ka gap control karta hai.

css
Copy
Edit
word-spacing: 10px;
6Ô∏è‚É£ line-height
Line ke upar aur niche ka vertical gap control karta hai.

css
Copy
Edit
line-height: 1.5; /* 1.5 √ó font size 
7Ô∏è‚É£ text-indent
Paragraph ka first line kitna andar se start ho.


text-indent: 50px;
8Ô∏è‚É£ white-space
Text ka wrapping aur spaces kaise handle honge.


white-space: normal;   /* Default, wrap hota hai 
white-space: nowrap;   /* Wrap nahi hoga, ek line me chalega 
white-space: pre;      /* Spaces & line breaks preserve hote hain 
white-space: pre-wrap; /* Spaces preserve + wrap bhi hota hai 


9Ô∏è‚É£ overflow-wrap / word-break
Long words ko break karne ka control.
overflow-wrap: break-word; /* Long words break ho jaye 
word-break: break-all;     /* Har jagah break ho sakta hai 


üîü text-shadow
Text pe shadow lagata hai.
text-shadow: 2px 2px 5px gray; /* x-offset, y-offset, blur, color 
1Ô∏è‚É£1Ô∏è‚É£ direction
Text ka direction set karta hai.

direction: ltr; /* Left to right 
direction: rtl; /* Right to left 
1Ô∏è‚É£2Ô∏è‚É£ Writing mode
Text flow ka direction set karta hai (vertical layouts ke liye).


writing-mode: horizontal-tb; /* Default 
writing-mode: vertical-rl;   /* Top to bottom, right to left 
writing-mode: vertical-lr;   /* Top to bottom, left to right 

1Ô∏è‚É£3Ô∏è‚É£ font-related properties
Text ka style, weight, size set karta hai.


| Property        | Purpose                    |
| --------------- | -------------------------- |
| text-align      | Horizontal alignment       |
| text-decoration | Underline/overline/strike  |
| text-transform  | Upper/lower/capitalize     |
| letter-spacing  | Gap between letters        |
| word-spacing    | Gap between words          |
| line-height     | Gap between lines          |
| text-indent     | First line indent          |
| white-space     | Wrapping & spaces control  |
| overflow-wrap   | Long word wrapping         |
| text-shadow     | Shadow effect              |
| direction       | LTR / RTL text             |
| writing-mode    | Horizontal / vertical text |
| font-\*         | Font style, size, weight   |



üìí CSS Flexbox ‚Äì Complete Notes

1Ô∏è‚É£ Flexbox Kya Hai?
CSS layout system jo elements ko flexible aur responsive banata hai.

1D layout (ya to row ya column) ke liye best hota hai.

Parent = Flex container
Child = Flex items

.container {
  display: flex; /* Flexbox activate 
}


2Ô∏è‚É£ Flex Container Properties
Yeh properties parent element pe lagti hain.

display: flex
Flexbox enable karta hai.

Items ek hi line (row) me arrange hote hain by default.

flex-direction
Items kis direction me arrange honge.

flex-direction: row;        /* Default - left to right 
flex-direction: row-reverse;/* Right to left 
flex-direction: column;     /* Top to bottom 
flex-direction: column-reverse;
flex-wrap
Items wrap (line break) kare ya nahi.


flex-wrap: nowrap;   /* Default - No wrap 
flex-wrap: wrap;     /* Wrap to next line 
flex-wrap: wrap-reverse;
flex-flow
flex-direction + flex-wrap ka shorthand.


flex-flow: row wrap;
justify-content (Main axis alignment)
Items ko horizontally align karta hai (agar flex-direction: row).

justify-content: flex-start; /* Default - Left aligned
justify-content: flex-end;   /* Right aligned 
justify-content: center;     
justify-content: space-between;
justify-content: space-around;
justify-content: space-evenly;
align-items (Cross axis alignment)
Items ko vertically align karta hai (agar flex-direction: row).


align-items: flex-start;
align-items: flex-end;
align-items: center;
align-items: stretch; /* Default 
align-items: baseline;
align-content
Multiple rows/columns ke beech spacing control karta hai (jab wrap ho).


align-content: flex-start;
align-content: flex-end;
align-content: center;
align-content: space-between;
align-content: space-around;
align-content: stretch;
3Ô∏è‚É£ Flex Item Properties
Yeh properties child elements pe lagti hain.

order
Flex items ka order change karta hai.


.item1 { order: 2; }
.item2 { order: 1; }
flex-grow
Extra space fill karne ka ratio.


.item { flex-grow: 1; } /* Equal grow 
flex-shrink
Chhota hone ka ratio jab space kam ho.

.item { flex-shrink: 1; } /* Default 
flex-basis
Initial size before space distribution.


.item { flex-basis: 200px; }
flex
flex-grow flex-shrink flex-basis ka shorthand.


.item { flex: 1 1 200px; }
align-self
Individual item ka vertical alignment change karta hai.


.item { align-self: center; }
4Ô∏è‚É£ Visual Axis Concept
Main axis ‚Üí flex-direction ke direction me.

Cross axis ‚Üí Uske perpendicular direction me.

Example:
flex-direction: row ‚Üí Main axis horizontal, Cross axis vertical.

5Ô∏è‚É£ Quick Example

.container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}

.item {
  flex: 1;
  margin: 10px;
}
6Ô∏è‚É£ Interview Point Summary
Flexbox ‚Üí 1D layout, Grid ‚Üí 2D layout.

justify-content ‚Üí main axis alignment.

align-items ‚Üí cross axis alignment.

flex-grow ‚Üí kitna expand kare.

flex-shrink ‚Üí kitna shrink kare.

flex-basis ‚Üí starting size.




=====================================
üìí CSS Pseudo-class & Pseudo-element

1Ô∏è‚É£ Pseudo-class
Definition: Special state of an element ko target karta hai.

Syntax: selector:pseudo-class

Example: Hover, visited, first-child, etc.

a:hover { color: red; }         /* Mouse hover hone par 
a:active { color: green; }      /* Click hone ke time 
a:visited { color: purple; }    /* Link already visited 
input:focus { border: 2px solid blue; } /* Input me cursor aane par 

p:first-child { color: red; }   /* Parent ka pehla child 
p:last-child { color: blue; }   /* Parent ka last child 
p:nth-child(2) { color: green; }/* Second child 
p:nth-of-type(odd) { background: lightgray; } /* Odd paragraphs 

input:checked { background: yellow; } /* Checkbox checked hone par 
button:disabled { opacity: 0.5; }     /* Disabled button 

2Ô∏è‚É£ Pseudo-element
Definition: Element ke specific part ko target karta hai, jaise text ka pehla letter ya before/after ka content.

Syntax: selector::pseudo-element

Example: ::before, ::after, ::first-line, etc.

p::first-line { font-weight: bold; }   /* Sirf first line style */
/* p::first-letter { font-size: 2em; }    /* Sirf first letter style 

p::before {
  content: "üëâ ";  /* Text se pehle icon/text add
  color: red;
}

p::after {
  content: " ‚úÖ";  /* Text ke baad icon/text add 
  color: green;
}

::selection {
  background: yellow; /* Text select hone par background 
  color: black;
} 


| Feature        | Pseudo-class                  | Pseudo-element             |
| -------------- | ----------------------------- | -------------------------- |
| Target         | Element ka **state/position** | Element ka **part**        |
| Syntax         | `:` single colon              | `::` double colon          |
| Example        | `:hover`, `:first-child`      | `::before`, `::first-line` |
| Content insert | ‚ùå Nahi kar sakte              | ‚úÖ Kar sakte ho (`content`) |*/
